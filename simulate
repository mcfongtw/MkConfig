#!/bin/bash
#
# Build and source distribution tool for project 'MkConfig'
# 

CURRENT_WORKSPACE_PATH=$PWD
PY_ENV_HOME=$CURRENT_WORKSPACE_PATH/.py_env

PKG_NAME=mkconfig
PKG_VER=0.1b0


SETUP_BUILD_PATH=$CURRENT_WORKSPACE_PATH/build
SETUP_DIST_PATH=$CURRENT_WORKSPACE_PATH/dist
SETUP_DIST_SRC_PATH=$CURRENT_WORKSPACE_PATH/$PKG_NAME-$PKG_VER

function do_clean {
    # Delete previous virtualenv
    if [ -d $PY_ENV_HOME ];
        then
        rm -rf $PY_ENV_HOME
    fi

    # Delete previous setup.py build
    if [ -d $SETUP_BUILD_PATH ];
        then
        rm -rf $SETUP_BUILD_PATH
    fi

    # Delete previous setup.py sdist -k
    if [ -d $SETUP_DIST_PATH ];
        then
        rm -rf $SETUP_DIST_PATH
    fi
    if [ -d $SETUP_DIST_SRC_PATH ];
        then
        rm -rf $SETUP_DIST_SRC_PATH
    fi
}

function check_init {
    # Delete previous virtualenv
    if [ ! -d $PY_ENV_HOME ];
        then
        echo '==============================================='
        echo '[ERR] virtualenv does not exist, perform init'
        echo '==============================================='
        do_init
    fi

}

function do_init {
    #clean first
    do_clean

    # Create virtualenv and install necessary packages
    mkdir -p $PY_ENV_HOME

    echo '==============================================='
    echo 'Before everything begins, where am I?'
    echo '-----------------------------------------------'
    echo $CURRENT_WORKSPACE_PATH
    echo '==============================================='
    echo


    echo '==============================================='
    echo 'Create virtualenv at ' $PY_ENV_HOME
    echo '-----------------------------------------------'
    virtualenv --python=python3 --no-site-packages $PY_ENV_HOME
    # Activate the virtual env
    source $PY_ENV_HOME/bin/activate
    echo '==============================================='
    echo


    echo '==============================================='
    echo 'Install build required libraries'
    echo '-----------------------------------------------'
    pip install jinja2
    pip install pyYAML
    pip install cement
    echo '==============================================='
    echo
    deactivate
}


function do_doc {
    check_init
    # Activate the virtual env
    source $PY_ENV_HOME/bin/activate

    local DOC_OUTPUT=docs/build
    local DOC_CONF=docs/source

    echo '==============================================='
    echo 'Install build-doc required libraries'
    echo '-----------------------------------------------'
    pip install sphinx
    rm -rf $DOC_OUTPUT
    sphinx-build -b html $DOC_CONF $DOC_OUTPUT
    echo '==============================================='
    echo

    deactivate
}

function do_dist {
    check_init
    # Activate the virtual env
    source $PY_ENV_HOME/bin/activate

    echo '==============================================='
    echo "setup.py sdist -k"
    python setup.py sdist -k
    tree $SETUP_DIST_SRC_PATH
    echo '==============================================='
    echo

    deactivate
}

function do_build {
    check_init
    # Activate the virtual env
    source $PY_ENV_HOME/bin/activate

    echo '==============================================='
    echo "setup.py build"
    echo '-----------------------------------------------'
    python setup.py build
    tree $SETUP_BUILD_PATH
    echo '==============================================='
    echo

    deactivate
}


function do_install {
    check_init
    # Activate the virtual env
    source $PY_ENV_HOME/bin/activate

    echo '==============================================='
    echo "setup.py install"
    echo '-----------------------------------------------'
    python setup.py install
    echo '==============================================='
    echo

    echo '==============================================='
    echo 'Testing executable binaries'
    echo '-----------------------------------------------'
    cd $CURRENT_WORKSPACE_PATH
    rm /tmp/output.out
    mkconfig -i./bin/sample.collectdjmx.descriptor.yaml  -o/tmp/output.out
    cat /tmp/output.out
    echo '==============================================='
    echo

    deactivate
}


function do_nosetests {
    do_clean
    do_install
    # Activate the virtual env
    source $PY_ENV_HOME/bin/activate

    echo '==============================================='
    echo 'Install test required libraries'
    echo '-----------------------------------------------'
    pip install nosexcover
    echo '==============================================='
    echo

    echo '==============================================='
    echo 'Perform nosetests '
    echo '-----------------------------------------------'
    cd $CURRENT_WORKSPACE_PATH
    nosetests mkconfig.tests --with-xcoverage --with-xunit --cover-package=mkconfig.conf --cover-package=mkconfig.core --cover-inclusive
    echo '==============================================='
    echo

    deactivate
}

function do_analysis {
    check_init
    # Activate the virtual env
    source $PY_ENV_HOME/bin/activate

    echo '==============================================='
    echo 'Install analysis required libraries'
    echo '-----------------------------------------------'
    pip install pylint
    echo '==============================================='
    echo

    echo '==============================================='
    echo 'Perform pylint '
    echo '-----------------------------------------------'
    pylint --rcfile=mkconfig/tests/pylintrc -f parseable mkconfig/core mkconfig/conf | tee pylint.out
    cat pylint.out
    echo '==============================================='
    echo

    deactivate
}


function do_uninstall {
    check_init
    # Activate the virtual env
    source $PY_ENV_HOME/bin/activate
    echo '==============================================='
    echo 'pip uninstall'
    echo '-----------------------------------------------'
    pip uninstall $PKG_NAME
    echo '==============================================='

    deactivate
}

function print_usage {
    echo '==============================================='
    echo 'Usage:'
    echo './operate dist/build/install/uninstall/test/doc/show'
    echo '-----------------------------------------------'
    echo '==============================================='
}

function do_show {
    check_init

    # Activate the virtual env
    source $PY_ENV_HOME/bin/activate
    echo '==============================================='
    echo "pip show"
    echo '-----------------------------------------------'
    pip show $PKG_NAME
    echo '-----------------------------------------------'
    echo "pip freeze"
    echo '-----------------------------------------------'
    pip freeze
    echo '==============================================='
    echo
}

function select_op { 
    local operation=$1

    case "$operation" in
    init)
        do_init
        ;;
    dist)
        do_dist
        ;;
    build)
        do_build
        ;;
    clean)
        do_clean
        ;;
    install)
        do_install
        ;;
    uninstall)
        do_uninstall
        ;;
    #upgrade)
    #    ;;
    show)
        do_show
        ;;
    test)
        do_nosetests
        ;;
    analysis)
        do_analysis
        ;;
    doc)
        do_doc
        ;;
    *)
        print_usage
        ;;
    esac
}

#main begins here

select_op $1
